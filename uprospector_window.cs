//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.25.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

namespace uprospector
{
    using Terminal.Gui;


    public partial class uprospector_window
    {
        private System.Threading.Timer _progress_bar_timer;
        
        public uprospector_window()
        {
            InitializeComponent();

            progress_bar.CanFocus = false;
            progress_bar.Visible = false;
            destination_path.CanFocus = false;
            source_path.CanFocus = false;
            source_path.ReadOnly = true;
            destination_path.ReadOnly = true;

            remove_unused_directories.Checked = unity_package_tools.remove_unused_directories;
            remove_unused_directories.Toggled += (args) =>
            {
                unity_package_tools.remove_unused_directories = remove_unused_directories.Checked;
            };
            
            exclude_unity_only.Checked = unity_package_tools.exclude_unity_files;
            exclude_unity_only.Toggled += (args) =>
            {
                unity_package_tools.exclude_unity_files = exclude_unity_only.Checked;
            };
            
            string appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            // Construct the full path to the Unity Asset Store folder
            string unityAssetStorePath = Path.Combine(appDataPath, "Unity", "Asset Store-5.x");

            // Check if the directory exists
            if (Directory.Exists(unityAssetStorePath))
            {
                source_path.Text = unityAssetStorePath;
            }

            dst_button.Clicked += on_dst_button;
            src_btn.Clicked += on_src_button;
            extract_btn.Clicked += on_extract_button;
            exit_btn.Clicked += on_exit_button;
        }
        
        private void start_progress_bar()
        {
            if(_progress_bar_timer == null)
            {
                progress_bar.Visible = true;
                BringSubviewForward(progress_bar);
                TimerCallback callback = new TimerCallback(_ => Application.MainLoop.Invoke(() => update_progress()));
                _progress_bar_timer = new System.Threading.Timer(callback, null, 0, 100);
            }
            else
            {
                Application.MainLoop.Invoke(() => progress_bar.Visible = true);
                _progress_bar_timer?.Change(0, 100);
            }
        }

        private void stop_progress()
        {
            Application.MainLoop.Invoke(() =>
            {
                SendSubviewToBack(progress_bar);
                progress_bar.Visible = false;
                src_btn.Visible = true;
                dst_button.Visible = true;
                extract_btn.Visible = true;
                source_path.Visible = true;
            });
            _progress_bar_timer?.Change(Timeout.Infinite, Timeout.Infinite);
        }

        private void update_progress()
        {
            progress_bar.Pulse();
        }
        
        private void on_exit_button()
        {
            Application.RequestStop();
        }

        private void on_extract_button()
        {
            if (!Directory.Exists(source_path.Text.ToString()))
            {
                MessageBox.ErrorQuery(50, 7, "Error", "Source path does not exist.", "Ok");
                return;
            }

            if (!Directory.Exists(destination_path.Text.ToString()))
            {
                MessageBox.ErrorQuery(50, 7, "Error", "Destination path does not exist.", "Ok");
                return;
            }

            src_btn.Visible = false;
            dst_button.Visible = false;
            extract_btn.Visible = false;
            source_path.Visible = false;
            exit_btn.SetFocus();

            start_progress_bar();
            
            unity_package_tools.package_extracted += on_package_extracted;
            unity_package_tools.extraction_complete += on_extraction_complete;
            unity_package_tools.extract_all_packages(source_path.Text.ToString() ?? string.Empty,
                destination_path.Text.ToString() ?? string.Empty);
        }

        private void on_package_extracted(string obj)
        {
            Application.MainLoop.Invoke(() =>
            {
                destination_path.Text = obj;
            });
        }

        private void on_extraction_complete(int obj)
        {
            Application.MainLoop.Invoke(() =>
            {
                destination_path.Text = "Destination: ";
                unity_package_tools.extraction_complete -= on_extraction_complete;
                stop_progress();
                MessageBox.Query(50, 7, "Extraction complete", $"Extracted {obj} packages.", "Ok");    
            });
        }

        private void on_src_button()
        {
            var dlg = new OpenDialog("Select source folder", "set source path", null, OpenDialog.OpenMode.Directory);

            Application.Run(dlg);

            if (dlg.FilePath != null)
            {
                source_path.Text = dlg.FilePath;
            }
        }

        private void on_dst_button()
        {
            var dlg = new OpenDialog("Select destination folder", "set destination path", null, OpenDialog.OpenMode.Directory);

            Application.Run(dlg);

            if (dlg.FilePath != null)
            {
                destination_path.Text = dlg.FilePath;
            }
        }
    }
}
